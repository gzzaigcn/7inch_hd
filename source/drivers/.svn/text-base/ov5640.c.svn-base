/******************************************************************************

   Copyright (C), 2014-,    Du-Health Electron Co.    All rights reserved. 

*******************************************************************************
 * File Name : ov5640.c
 * Version : 1.0
 * Author : gzz
 * Created : 2014/9/3
 * Last Modified :
  Description   : camera ov5640 modules setup
 * Function List :
 * Modification History :
   1.Date : 2014/9/3
     Author : gzz
     Modification : Created file
 
 ******************************************************************************/
#include "dm6437.h"
#include "dm6437_i2c.h"
#include "comm_camera.h"


#define MODULE_NAME "ov5640"

#define reg_list reg_list_a16_d8


#define OV5640_I2C_ADDR  (0x78>>1)
#define OV5640_ID 0x5640

#define REG_DLY 0xffff

//define Macro for ov5640 power/standby/reset volatage level
#define OV5640_PWR_ON      1
#define OV5640_PWR_OFF     0
#define OV5640_STBY_ON     1
#define OV5640_STBY_OFF   0
#define OV5640_RESET_ON   0
#define OV5640_RESET_OFF   1


static struct reg_list ov5640_default_regs[] = {

  {0x3103,0x11},//
  {0x3008,0x82},//reset
  {REG_DLY,0x1e},//delay 30ms
  {0x3008,0x42},//power down
  {0x3103,0x03},//
  {0x3017,0x00},//disable oe
  {0x3018,0x00},//
  //pll and clock setting
  {0x3034,0x18},//
  {0x3035,0x21},//
  {0x3036,0x46},//0x46->30fps
  {0x3037,0x13},//////div
  {0x3108,0x01},//
  {0x3824,0x01},//
  
  {0x3630,0x36},//
  {0x3631,0x0e},//
  {0x3632,0xe2},//
  {0x3633,0x12},//
  {0x3621,0xe0},//
  {0x3704,0xa0},//
  {0x3703,0x5a},//
  {0x3715,0x78},//
  {0x3717,0x01},//
  {0x370b,0x60},//
  {0x3705,0x1a},//
  {0x3905,0x02},//
  {0x3906,0x10},//
  {0x3901,0x0a},//
  {0x3731,0x12},//
  {0x3600,0x08},//
  {0x3601,0x33},//
//  {0x302d,0x60},//
  {0x3620,0x52},//
  {0x371b,0x20},//
  {0x471c,0x50},//
  {0x3a13,0x43},//
  {0x3a18,0x00},//
  {0x3a19,0x88},//
  {0x3635,0x13},//
  {0x3636,0x03},//
  {0x3634,0x40},//
  {0x3622,0x01},//
  {0x3c01,0x34},//
  {0x3c04,0x28},//
  {0x3c05,0x98},//
  {0x3c06,0x00},//
  {0x3c07,0x08},//
  {0x3c08,0x00},//
  {0x3c09,0x1c},//
  {0x3c0a,0x9c},//
  {0x3c0b,0x40},//
//  {0x3820,0x41},// binning
//  {0x3821,0x41},// binning
  {0x3814,0x31},//
  {0x3815,0x31},//
  {0x3800,0x00},//
  {0x3801,0x00},//
  {0x3802,0x00},//
  {0x3803,0x04},//
  {0x3804,0x0a},//
  {0x3805,0x3f},//
  {0x3806,0x07},//
  {0x3807,0x9b},//
  {0x3808,0x02},//
  {0x3809,0x80},//
  {0x380a,0x01},//
  {0x380b,0xe0},//
  {0x380c,0x07},//
  {0x380d,0x68},//
  {0x380e,0x03},//
  {0x380f,0xd8},//
  {0x3810,0x00},//
  {0x3811,0x10},//
  {0x3812,0x00},//
  {0x3813,0x06},//
  {0x3618,0x00},//
  {0x3612,0x29},//
  {0x3708,0x64},//
  {0x3709,0x52},//
  {0x370c,0x03},//
  {0x3a00,0x78},
  {0x3a02,0x03},//
  {0x3a03,0xd8},//
  {0x3a08,0x01},//
  {0x3a09,0x27},//
  {0x3a0a,0x00},//
  {0x3a0b,0xf6},//
  {0x3a0e,0x03},//
  {0x3a0d,0x04},//
  {0x3a14,0x03},//
  {0x3a15,0xd8},//
  {0x4001,0x02},//
  {0x4004,0x02},//
  {0x3000,0x00},//
  {0x3002,0x1c},//
  {0x3004,0xff},//
  {0x3006,0xc3},//
  {0x300e,0x58},//
//  {0x302e,0x00},//
  
  {0x302c,0xc2},//bit[7:6]: output drive capability
            //00: 1x   01: 2x  10: 3x  11: 4x

  {0x4300,0x30},//
  {0x501f,0x00},//
  {0x4713,0x03},//
  {0x4407,0x04},//
  {0x440e,0x00},//
  {0x460b,0x35},//
  {0x460c,0x20},//
  {0x4837,0x22},
  {0x5000,0xa7},//
  {0x5001,0xa3},//
  
  {0x4740,0x21},//hsync,vsync,clock pol,reference to application note,spec is wrong
                  
  //AWB   
	{0x3406,0x00},  //0x00}, // LA      ORG
  {0x5180,0xff},  //0xff},	// 0xff    0xff
	{0x5181,0xf2},  //0x50}, // 0xf2    0x50               	
	{0x5182,0x00},  //0x11}, // 0x00    0x11              	
	{0x5183,0x14},  //0x14}, // 0x14    0x14             	
	{0x5184,0x25},  //0x25}, // 0x25    0x25             	
	{0x5185,0x24},  //0x24}, // 0x24    0x24             	
	{0x5186,0x16},  //0x1c}, // 0x09    0x1c              	
	{0x5187,0x16},  //0x18}, // 0x09    0x18              	
	{0x5188,0x16},  //0x18}, // 0x09    0x18              	
	{0x5189,0x6e},  //0x6e}, // 0x75    0x6e             	
	{0x518a,0x68},  //0x68}, // 0x54    0x68             	
	{0x518b,0xe0},  //0xa8}, // 0xe0    0xa8             	
	{0x518c,0xb2},  //0xa8}, // 0xb2    0xa8             	
	{0x518d,0x42},  //0x3d}, // 0x42    0x3d             	
	{0x518e,0x3e},  //0x3d}, // 0x3d    0x3d             	
	{0x518f,0x4c},  //0x54}, // 0x56    0x54             	
	{0x5190,0x56},  //0x54}, // 0x46    0x54             	
	{0x5191,0xf8},  //0xf8}, // 0xf8    0xf8             	
	{0x5192,0x04},  //0x04}, // 0x04    0x04              	
	{0x5193,0x70},  //0x70}, // 0x70    0x70             	
	{0x5194,0xf0},  //0xf0}, // 0xf0    0xf0             	
	{0x5195,0xf0},  //0xf0}, // 0xf0    0xf0             	
	{0x5196,0x03},  //0x03}, // 0x03    0x03              	
	{0x5197,0x01},  //0x01}, // 0x01    0x01              	
	{0x5198,0x04},  //0x05}, // 0x04    0x05              	
	{0x5199,0x12},  //0x7c}, // 0x12    0x7c
	{0x519a,0x04},  //0x04}, // 0x04    0x04
	{0x519b,0x00},  //0x00}, // 0x00    0x00
	{0x519c,0x06},  //0x06}, // 0x06    0x06
	{0x519d,0x82},  //0x79}, // 0x82    0x79
	{0x519e,0x38},  //0x38}, // 0x38    0x38
  //Color                   // LA      ORG      
	{0x5381,0x1e},  //0x1e}, // 0x1e    0x1e
	{0x5382,0x5b},  //0x5b}, // 0x5b    0x5b
	{0x5383,0x14},  //0x08}, // 0x08    0x08
	{0x5384,0x05},  //0x0a}, // 0x0a    0x05
	{0x5385,0x77},  //0x7e}, // 0x7e    0x72
	{0x5386,0x7c},  //0x88}, // 0x88    0x77
	{0x5387,0x72},  //0x7c}, // 0x7c    0x6d
	{0x5388,0x58},  //0x6c}, // 0x6c    0x4d
	{0x5389,0x1a},  //0x10}, // 0x10    0x20
	{0x538a,0x01},  //0x01}, // 0x01    0x01
	{0x538b,0x98},  //0x98}, // 0x98    0x98

  //Sharpness/Denoise     
  {0x5300,0x08}, 
  {0x5301,0x30},      
  {0x5302,0x30}, 
  {0x5303,0x10}, 
	{0x5308,0x25}, //sharpness/noise auto
  {0x5304,0x08}, 
  {0x5305,0x30}, 
  {0x5306,0x1c}, 
  {0x5307,0x2c}, 
  {0x5309,0x08}, 
  {0x530a,0x30}, 
  {0x530b,0x04}, 
  {0x530c,0x06}, 

	//Gamma        
  {0x5480,0x01},  //???     // LA     ORG
  {0x5481,0x06},  //0x08},  // 0x08     0x06
  {0x5482,0x12},  //0x14},  // 0x14     0x15
  {0x5483,0x1e},  //0x28},  // 0x28     0x28
  {0x5484,0x4a},  //0x51},  // 0x51     0x3b
  {0x5485,0x58},  //0x65},  // 0x65     0x50
  {0x5486,0x65},  //0x71},  // 0x71     0x5d
  {0x5487,0x72},  //0x7d},  // 0x7d     0x6a
  {0x5488,0x7d},  //0x87},  // 0x87     0x75
  {0x5489,0x88},  //0x91},  // 0x91     0x80
  {0x548a,0x92},  //0x9a},  // 0x9a     0x8a
  {0x548b,0xa3},  //0xaa},  // 0xaa     0x9b
  {0x548c,0xb2},  //0xb8},  // 0xb8     0xaa
  {0x548d,0xc8},  //0xcd},  // 0xcd     0xc0
  {0x548e,0xdd},  //0xdd},  // 0xdd     0xd5
  {0x548f,0xf0},  //0xea},  // 0xea     0xe8
  {0x5490,0x15},  //0x1d},  // 0x1d     0x20
    
  //UV  
  {0x5580,0x06}, 
  {0x5583,0x40}, 
  {0x5584,0x10}, 
  {0x5589,0x10}, 
  {0x558a,0x00}, 
  {0x558b,0xf8}, 
  {0x501d,0x40}, 
  
//  {0x5587,0x05},
//  {0x5588,0x09},
  //Lens Shading 
  {0x5800,0x15},    //0xa7}, //LA        org
  {0x5801,0x10},    //0x23}, //0x23      0x17
  {0x5802,0x0D},    //0x14}, //0x14      0x10
  {0x5803,0x0D},    //0x0f}, //0x0f      0x0e
  {0x5804,0x0F},    //0x0f}, //0x0f      0x0e
  {0x5805,0x15},    //0x12}, //0x12      0x11
  {0x5806,0x0A},    //0x26}, //0x26      0x1b
  {0x5807,0x07},    //0x0c}, //0x0c      0x0b
  {0x5808,0x05},    //0x08}, //0x08      0x07
  {0x5809,0x05},    //0x05}, //0x05      0x05
  {0x580A,0x07},    //0x05}, //0x05      0x06
  {0x580B,0x0B},    //0x08}, //0x08      0x09
  {0x580C,0x07},    //0x0d}, //0x0d      0x0e
  {0x580D,0x03},    //0x08}, //0x08      0x06
  {0x580E,0x01},    //0x03}, //0x03      0x02
  {0x580F,0x01},    //0x00}, //0x00      0x00
  {0x5810,0x03},    //0x00}, //0x00      0x00
  {0x5811,0x07},    //0x03}, //0x03      0x03
  {0x5812,0x07},    //0x09}, //0x09      0x09
  {0x5813,0x03},    //0x07}, //0x07      0x06
  {0x5814,0x01},    //0x03}, //0x03      0x03
  {0x5815,0x01},    //0x00}, //0x00      0x00
  {0x5816,0x03},    //0x01}, //0x01      0x00
  {0x5817,0x06},    //0x03}, //0x03      0x03
  {0x5818,0x0D},    //0x08}, //0x08      0x09
  {0x5819,0x08},    //0x0d}, //0x0d      0x0b
  {0x581A,0x06},    //0x08}, //0x08      0x08
  {0x581B,0x06},    //0x05}, //0x05      0x05
  {0x581C,0x07},    //0x06}, //0x06      0x05
  {0x581D,0x0B},    //0x08}, //0x08      0x08
  {0x581E,0x14},    //0x0e}, //0x0e      0x0e
  {0x581F,0x13},    //0x29}, //0x29      0x18
  {0x5820,0x0E},    //0x17}, //0x17      0x12
  {0x5821,0x0E},    //0x11}, //0x11      0x0f
  {0x5822,0x12},    //0x11}, //0x11      0x0f
  {0x5823,0x12},    //0x15}, //0x15      0x12
  {0x5824,0x46},    //0x28}, //0x28      0x1a
  {0x5825,0x26},    //0x46}, //0x46      0x0a
  {0x5826,0x06},    //0x26}, //0x26      0x0a
  {0x5827,0x46},    //0x08}, //0x08      0x0a
  {0x5828,0x44},    //0x26}, //0x26      0x0a
  {0x5829,0x26},    //0x64}, //0x64      0x46
  {0x582A,0x24},    //0x26}, //0x26      0x2a
  {0x582B,0x42},    //0x24}, //0x24      0x24
  {0x582C,0x24},    //0x22}, //0x22      0x44
  {0x582D,0x46},    //0x24}, //0x24      0x24
  {0x582E,0x24},    //0x24}, //0x24      0x28
  {0x582F,0x42},    //0x06}, //0x06      0x08
  {0x5830,0x60},    //0x22}, //0x22      0x42
  {0x5831,0x42},    //0x40}, //0x40      0x40
  {0x5832,0x24},    //0x42}, //0x42      0x42
  {0x5833,0x26},    //0x24}, //0x24      0x28
  {0x5834,0x24},    //0x26}, //0x26      0x0a
  {0x5835,0x24},    //0x24}, //0x24      0x26
  {0x5836,0x24},    //0x22}, //0x22      0x24
  {0x5837,0x46},    //0x22}, //0x22      0x26
  {0x5838,0x44},    //0x26}, //0x26      0x28
  {0x5839,0x46},    //0x44}, //0x44      0x4a
  {0x583A,0x26},    //0x24}, //0x24      0x0a
  {0x583B,0x48},    //0x26}, //0x26      0x0c
  {0x583C,0x44},    //0x28}, //0x28      0x2a
  {0x583D,0xBF},    //0x42}, //0x42      0x28
   
  //EV
  {0x3a0f,0x30}, 
  {0x3a10,0x28}, 
  {0x3a1b,0x30}, 
  {0x3a1e,0x26}, 
  {0x3a11,0x60}, 
  {0x3a1f,0x14}, 

  {0x5025,0x00}, 
  
//  {0x3031,0x08}, //disable internal LDO
//  {0x4005,0x1a},
//  //power down release
  {0x3008,0x02}, 
  //{REG_TERM,VAL_TERM},

};

static struct reg_list ov5640_720P_regs[] = {  //1280*720

//  //power down
//  {0x3008,0x42},
  {0x3820,0x41},
  {0x3821,0x07},
//  //pll and clock setting
  {0x3034,0x18},
  {0x3035,0x21},  //0x11:60fps 0x21:30fps 0x41:15fps
  {0x3036,0x54},
  {0x3037,0x13},
  {0x3108,0x01},
  {0x3824,0x01},
  {REG_DLY,0x05},//delay 5ms
  //timing
  //1280x720
  {0x3808,0x05},  //H size MSB
  {0x3809,0x00},  //H size LSB
  {0x380a,0x02},  //V size MSB
  {0x380b,0xd0},  //V size LSB
  {0x380c,0x07},  //HTS MSB        
  {0x380d,0x64},  //HTS LSB   
  {0x380e,0x02},  //VTS MSB        
  {0x380f,0xe4},  //LSB       

  //banding step
  {0x3a08,0x00}, //50HZ step MSB 
  {0x3a09,0xdd}, //50HZ step LSB 
  {0x3a0a,0x00}, //60HZ step MSB 
  {0x3a0b,0xb8}, //60HZ step LSB 
  {0x3a0e,0x03}, //50HZ step max 
  {0x3a0d,0x04}, //60HZ step max 

  {0x3503,0x00},  //AEC enable
  {0x350c,0x00},
  {0x350d,0x00},
  {0x3c07,0x07}, //light meter 1 thereshold   
  {0x3814,0x31}, //horizton subsample
  {0x3815,0x31}, //vertical subsample
  {0x3800,0x00}, //x address start high byte
  {0x3801,0x00}, //x address start low byte  
  {0x3802,0x00},  //y address start high byte 
  {0x3803,0xfa}, //y address start low byte 
  {0x3804,0x0a}, //x address end high byte
  {0x3805,0x3f}, //x address end low byte 
  {0x3806,0x06}, //y address end high byte
  {0x3807,0xa9}, //y address end low byte 
  {0x3810,0x00}, //isp hortizontal offset high byte
  {0x3811,0x10}, //isp hortizontal offset low byte
  {0x3812,0x00}, //isp vertical offset high byte
  {0x3813,0x04},  //isp vertical offset low byte
  
//  {0x5308,0x65},    //sharpen manual
//  {0x5302,0x00},    //sharpen offset 1
  {0x4002,0x45},    //BLC related
  {0x4005,0x18},    //BLC related
  
  {0x3618,0x00},
  {0x3612,0x29},
  {0x3709,0x52},
  {0x370c,0x03},
  {0x3a02,0x02}, //60HZ max exposure limit MSB 
  {0x3a03,0xe0}, //60HZ max exposure limit LSB 
  {0x3a14,0x02}, //50HZ max exposure limit MSB 
  {0x3a15,0xe0}, //50HZ max exposure limit LSB 
  
  {0x4004,0x02}, //BLC line number
  {0x3002,0x1c}, //reset JFIFO SFIFO JPG
  {0x3006,0xc3}, //enable xx clock
  {0x460b,0x37},  //debug mode
  {0x460c,0x20}, //PCLK Manuale
  {0x4837,0x16}, //PCLK period
  {0x5001,0x83}, //ISP effect
//  {0x3503,0x00},//AEC enable
  
  {0x302c,0xc2},//bit[7:6]: output drive capability
            //00: 1x   01: 2x  10: 3x  11: 4x 
  {0x3a18,0x00},//
  {0x3a19,0xd8},//
//  //power down release
//  {0x3008,0x02},     
//  {REG_DLY,0x32},//delay 50ms
  //{REG_TERM,VAL_TERM},
};

/*GPIO output disable*/
static struct reg_list  ov5640_io_disable_regs[] = {
  {0x3017,0x00},
  {0x3018,0x00},
  //{REG_TERM,VAL_TERM},
};

/*GPIO output enable*/
static struct reg_list  ov5640_io_enable_regs[] = {
  {0x3017,0x7f},
  {0x3018,0xfc},
  //{REG_TERM,VAL_TERM},
};

/*GPIO output disable*/
static struct reg_list ov5640_sw_stby_on_regs[] = {
  {0x3008,0x42},
};

static struct reg_list ov5640_sw_stby_off_regs[] = {
  {0x3008,0x02},
};



static void ov5640_read(Uint16 reg_addr, Uint8 *value)
{
    Uint8 data[2];
    
    data[0] = (reg_addr&0xff00) >> 8;//addr MSB first 
    data[1] = reg_addr & 0x00ff; 

    EVMDM6437_I2C_write(OV5640_I2C_ADDR, data, 2); //write reg addr

    EVMDM6437_I2C_read(OV5640_I2C_ADDR, value,1); //read 1Byte data
    
}

static void ov5640_write(Uint16 reg_addr, Uint8 value)
{
    Uint8 data[3];

    data[0] = (reg_addr&0xff00) >> 8;//addr MSB first 
    data[1] = reg_addr & 0x00ff; 
    data[2] = value;
    
    EVMDM6437_I2C_write(OV5640_I2C_ADDR, data, 3);
    
}

static void ov5640_write_array(struct reg_list *regs, Uint32 array_size)
{
    
    while(array_size--)
    {
        if(regs->addr == REG_DLY)
        {
            _waitmsec(regs->data); //delay ms
        }
        else
        {
            ov5640_write( regs->addr, regs->data);
        }
        regs++;
    }
    
}

static void ov5640_write_continuous(Uint16 base_addr, char *vals, Int32 size)
{
    Uint8 data[2+32];
    Uint8 once_len = 0;
    Uint32 i;
    
    while(size < 0)
    {
        once_len = size > 32 ? 32 : size;
        
        data[0] = (base_addr&0xff00) >> 8;//addr MSB first 
        data[1] = base_addr & 0x00ff;        

        for(i =2; i < once_len+2; i++)
            data[i] = *vals++;

        EVMDM6437_I2C_write(OV5640_I2C_ADDR, data, 2+once_len);//write 2(reg_addr)+once_len(datas)

        size -= once_len;
        base_addr += once_len;//offset process
        
    }
        
    
}

static Int8 ov5640_detect()
{
    Uint8 ret_val;
    ov5640_read(0x300a, &ret_val);
    
    if(ret_val != 0x56)
    {
        return -1;
    }
    
    ov5640_read(0x300b, &ret_val);
     if(ret_val != 0x40)
    {
        return -1;
    }   

    return 1;
}


Int8 camera_ov5640_ctrl_power(Uint8 ctrl_id)
{
    
    switch(ctrl_id)
    {
        
        case CAMERA_CTRL_PWR_ON:
            {

                /*setup camera control gpio to output*/
                EVMDM6437_GPIO_setDir(CAMERA_GPIO_POWER, GPIO_OUT);
                EVMDM6437_GPIO_setDir(CAMERA_GPIO_STBY, GPIO_OUT);
                EVMDM6437_GPIO_setDir(CAMERA_GPIO_RESET,  GPIO_OUT);
                
                /*standby on*/
                EVMDM6437_GPIO_setOutput(CAMERA_GPIO_STBY, OV5640_STBY_ON);                
                /*reset on*/
                EVMDM6437_GPIO_setOutput(CAMERA_GPIO_RESET, OV5640_RESET_ON);
                _waitusec(1000); //delay 1ms
                
                /*power on*/
                EVMDM6437_GPIO_setOutput(CAMERA_GPIO_POWER, OV5640_PWR_ON);
                _waitusec(10000);

               /*standby off*/
                EVMDM6437_GPIO_setOutput(CAMERA_GPIO_STBY, OV5640_STBY_OFF);
                _waitusec(10000);
                /*reset off*/
                EVMDM6437_GPIO_setOutput(CAMERA_GPIO_RESET, OV5640_RESET_OFF);
                _waitusec(30000);
            }
            break;
            
        case CAMERA_CTRL_PWR_OFF :
            {
                /*power off*/
                EVMDM6437_GPIO_setOutput(CAMERA_GPIO_POWER, OV5640_PWR_ON);
                _waitusec(10000);
        
               /*standby off*/
                EVMDM6437_GPIO_setOutput(CAMERA_GPIO_STBY, OV5640_STBY_OFF);
                _waitusec(10000);
                /*reset off*/
                EVMDM6437_GPIO_setOutput(CAMERA_GPIO_RESET, OV5640_RESET_ON);

                /*setup camera control gpio to input*/
                EVMDM6437_GPIO_setDir(CAMERA_GPIO_POWER, GPIO_IN);
                EVMDM6437_GPIO_setDir(CAMERA_GPIO_STBY,    GPIO_IN);
                EVMDM6437_GPIO_setDir(CAMERA_GPIO_RESET,  GPIO_IN);
            }
            break;
            
        case CAMERA_CTRL_STBY_ON :
            {

                /*software standby on*/
                ov5640_write_array(ov5640_sw_stby_on_regs, ARRAY_SIZE(ov5640_sw_stby_on_regs));
                ov5640_write_array(ov5640_io_disable_regs, ARRAY_SIZE(ov5640_io_disable_regs));
                _waitusec(10000);

                /*hardware standby on*/
                EVMDM6437_GPIO_setOutput(CAMERA_GPIO_STBY, OV5640_STBY_ON);
                
            }
            break;
            
        case CAMERA_CTRL_STBY_OFF :
            {
                /*hardware standby off*/
                EVMDM6437_GPIO_setOutput(CAMERA_GPIO_STBY, OV5640_STBY_OFF);
                _waitusec(10000);

                /*software standby off*/
                ov5640_write_array(ov5640_sw_stby_off_regs, ARRAY_SIZE(ov5640_sw_stby_off_regs));
                _waitusec(10000);
                ov5640_write_array(ov5640_io_enable_regs, ARRAY_SIZE(ov5640_io_enable_regs));
            }
            break;

        default:
            {
                return -1;
            }
    }

    return 1;
    
}


Int8 camera_ov5640_init()
{
    
    Int8 ret;
    
    ret = ov5640_detect(); 
    if(ret < 0)
    {
        return -1;
    }
    _waitusec(10000);
    
    ov5640_write_array(ov5640_default_regs, ARRAY_SIZE(ov5640_default_regs)) ;
    ov5640_write_array(ov5640_720P_regs, ARRAY_SIZE(ov5640_720P_regs)) ;

    return 1;

}


